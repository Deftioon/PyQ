from src.qcircpy import quantum, gates
import unittest
import numpy as np
import cupy as cp

class GatesTest(unittest.TestCase):
    def get_gate_cpu_test(self):
        g = gates.Gate(gates.GateMatrices.hadamard, 1, "cpu")
        g = gates.Gate(gates.GateMatrices.x, 1, "cpu")
        g = gates.Gate(gates.GateMatrices.y, 1, "cpu")
        g = gates.Gate(gates.GateMatrices.z, 1, "cpu")
        g = gates.Gate(gates.GateMatrices.t, 1, "cpu")
        g = gates.Gate(gates.GateMatrices.cnot, 2, "cpu")
        g = gates.Gate(gates.GateMatrices.cz, 2, "cpu")
        g = gates.Gate(gates.GateMatrices.swap, 2, "cpu")
        g = gates.Gate(gates.GateMatrices.ccnot, 3, "cpu")
    
    def get_gate_gpu_test(self):
        g = gates.Gate(gates.GateMatrices.hadamard, 1, "gpu")
        g = gates.Gate(gates.GateMatrices.x, 1, "gpu")
        g = gates.Gate(gates.GateMatrices.y, 1, "gpu")
        g = gates.Gate(gates.GateMatrices.z, 1, "gpu")
        g = gates.Gate(gates.GateMatrices.t, 1, "gpu")
        g = gates.Gate(gates.GateMatrices.cnot, 2, "gpu")
        g = gates.Gate(gates.GateMatrices.cz, 2, "gpu")
        g = gates.Gate(gates.GateMatrices.swap, 2, "gpu")
        g = gates.Gate(gates.GateMatrices.ccnot, 3, "gpu")
    
    def apply_single_gate_cpu_test(self):
        q = quantum.Qubit("0", "cpu")
        g = gates.Gate(gates.GateMatrices.hadamard, 1, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.x, 1, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.y, 1, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.z, 1, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.t, 1, "cpu")
        g(q)
        q = quantum.Qubit("00", "cpu")
        g = gates.Gate(gates.GateMatrices.cnot, 2, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.cz, 2, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.swap, 2, "cpu")
        g(q)
        q = quantum.Qubit("000", "cpu")
        g = gates.Gate(gates.GateMatrices.ccnot, 3, "cpu")
        g(q)
    
    def apply_single_gate_gpu_test(self):
        q = quantum.Qubit("0", "gpu")
        g = gates.Gate(gates.GateMatrices.hadamard, 1, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.x, 1, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.y, 1, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.z, 1, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.t, 1, "gpu")
        g(q)
        q = quantum.Qubit("00", "gpu")
        g = gates.Gate(gates.GateMatrices.cnot, 2, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.cz, 2, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.swap, 2, "gpu")
        g(q)
        q = quantum.Qubit("000", "gpu")
        g = gates.Gate(gates.GateMatrices.ccnot, 3, "gpu")
        g(q)
    
    def apply_parallel_gate_cpu_test(self):
        q = quantum.Qubit("00", "cpu")
        g = gates.Gate(gates.GateMatrices.hadamard, 1, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.x, 1, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.y, 1, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.z, 1, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.t, 1, "cpu")
        g(q)
        q = quantum.Qubit("0000", "cpu")
        g = gates.Gate(gates.GateMatrices.cnot, 2, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.cz, 2, "cpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.swap, 2, "cpu")
        g(q)
        q = quantum.Qubit("000000", "cpu")
        g = gates.Gate(gates.GateMatrices.ccnot, 3, "cpu")
        g(q)
    
    def apply_parallel_gate_gpu_test(self):
        q = quantum.Qubit("00", "gpu")
        g = gates.Gate(gates.GateMatrices.hadamard, 1, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.x, 1, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.y, 1, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.z, 1, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.t, 1, "gpu")
        g(q)
        q = quantum.Qubit("0000", "gpu")
        g = gates.Gate(gates.GateMatrices.cnot, 2, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.cz, 2, "gpu")
        g(q)
        g = gates.Gate(gates.GateMatrices.swap, 2, "gpu")
        g(q)
        q = quantum.Qubit("000000", "gpu")
        g = gates.Gate(gates.GateMatrices.ccnot, 3, "gpu")
        g(q)
    
def suite():
    suite = unittest.TestSuite()
    suite.addTest(GatesTest('get_gate_cpu_test'))
    suite.addTest(GatesTest('get_gate_gpu_test'))
    suite.addTest(GatesTest('apply_single_gate_cpu_test'))
    suite.addTest(GatesTest('apply_single_gate_gpu_test'))
    suite.addTest(GatesTest('apply_parallel_gate_cpu_test'))
    suite.addTest(GatesTest('apply_parallel_gate_gpu_test'))
    return suite

if __name__ == '__main__':
    runner = unittest.TextTestRunner()
    runner.run(suite())